@using Data.Models
@using aura_web_blazor.Services
@inject IOrderService OrderService
<MudSimpleTable Elevation="0"  Style="overflow-x: auto;     " >

    <tbody>
        @if(porosite > 0)
        {
            <tr>
                <td>Numri porosive:</td>
                <td style="font-weight:bolder; text-align:right;">@porosite</td>
            </tr>
            <tr>
                <td>Totali ditor:</td>
                <td style="font-weight:bolder; font-size:17.5px;text-align:right;">@Orders.Where(d=>d.Nj2.Equals(Category)).Sum(d=> decimal.Parse(d.Vlera)).ToString(".00")€</td>
            </tr>
            <tr>
                <td>Rush hour:</td>
                <td style="font-weight:bolder; text-align:right;">@ReturnRushHour(@Category)</td>
            </tr>
            <tr>
                <td>Paradite (deri 15:00):☀️</td>
                <td style="font-weight:bolder; text-align:right;">@ReturnParadite("para")€</td>
            </tr>
            <tr>
                <td>Pasdite (pas 15:00):🌙</td>
                <td style="font-weight:bolder; text-align:right;">@ReturnParadite("pas")€</td>
            </tr>
        }
        
    </tbody>
</MudSimpleTable>

@code {


    [Parameter]
    public string? Category { get; set; }
    int porosite;

    private IEnumerable<DetaletEFaturimit>? Orders;

    protected override async Task OnInitializedAsync()
    {
        Orders = (await OrderService.GetOrders()).ToList();
        porosite = Orders.Where(d=>d.Nj2.Equals(Category)).Count();
    }

    protected string ReturnSasiaPerProdukt(string Artikulli)
    {
        return Orders.Where(d => d.Artikulli.Equals(Artikulli)).Sum(d => int.Parse(d.Sasia)).ToString();;
    }

    protected string ReturnParadite(string paraPas)
    {
        if(paraPas.Equals("para")) return Orders.Where(d => DateTime.Parse(d.Ora).Hour < 15).Where(d => d.Nj2.Equals(Category)).Sum(d => decimal.Parse(d.Vlera)).ToString(".00");
        else return Orders.Where(d => DateTime.Parse(d.Ora).Hour > 15).Where(d => d.Nj2.Equals(Category)).Sum(d => decimal.Parse(d.Vlera)).ToString(".00");

    }


    protected string ReturnRushHour(string category)
    {
        //return "13:00";
        List<OraModel> query = (from d in Orders.Where(d=>d.Nj2.Equals(category))
                                group d by DateTime.Parse(d.Ora).Hour
                        into grp
                                select new OraModel()
                        {
                            Ora = grp.Key,
                            Vlera = grp.Sum(d => decimal.Parse(d.Vlera)),
                        }).OrderBy(d => d.Ora).ToList();
        return query.Max(d => d.Ora).ToString() + ":00" ;
    }

    
    partial class OraModel{
    public int Ora { get; set; }
    public decimal Vlera { get; set; }
    }
}

