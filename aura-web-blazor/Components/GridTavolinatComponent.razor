@using Data.Models
@using aura_web_blazor.Services
@inject IOrderService OrderService

@*<MudText Align="Align.Center" Style="margin-bottom:15px;margin-top:30px; font-size:18px; font-weight:bold;">Tavolinat</MudText>*@

<MudGrid>
    <ButtonKthehuComponent></ButtonKthehuComponent>
    @foreach(var d in GetTavolinatAktive())
    {
        <MudItem xs="3"  Class="rounded-lg">
            <NumriTavolinesComponent  NumriTavolines="@(d.Tavolina.Substring(0,1).Equals("0")? d.Tavolina.Substring(1):d.Tavolina)" KaPorosi=@d.isActive ></NumriTavolinesComponent>
        </MudItem>
    }
</MudGrid>

@code {
    private IEnumerable<DetaletEFaturimit>? Orders;

    protected override async Task OnInitializedAsync()
    {
        Orders = (await OrderService.GetOrders()).ToList();
    }


    protected List<Tavolinat> GetTavolinatAktive()
    {
        List<Tavolinat> tavolinat = (from d in Orders
                                     group d by new
                                     {
                                         d.Tavolina
                                     } into grp
                                     select new Tavolinat
                                        {
                                            Tavolina = grp.Key.Tavolina,
                                            isActive = (grp.GroupBy(p=> p.EshteMbyllur).Count() == 1) && ((grp.Select(d=> d.EshteMbyllur).First().Equals("x")) || (grp.Select(d=> d.EshteMbyllur).First().Equals("X"))) ? false : true,
                                        }).ToList();
        return OrderList(tavolinat);
    }


    protected List<Tavolinat> OrderList(List<Tavolinat> tavolinat)
    {
        List<Tavolinat> ordered = new List<Tavolinat>();
        string edited = "";
        foreach(var Tavolina in tavolinat)
        {
            if(Tavolina.Tavolina.Length == 1)
            {
                edited = "0" + Tavolina.Tavolina;
                ordered.Add(new Tavolinat(edited,Tavolina.isActive));
                continue;
            }
            ordered.Add(Tavolina);
        }

        ordered = ordered.OrderBy(p => p.Tavolina).OrderByDescending(d=>d.isActive).ToList();
        
        return ordered;
    }


    public partial class Tavolinat
    {
        public string? Tavolina { get; set; }
        public bool isActive { get; set; }
        public Tavolinat() { }
        public Tavolinat(string tavolina, bool isActive)
        {
            Tavolina = tavolina;
            this.isActive = isActive;
        }
    }
}
