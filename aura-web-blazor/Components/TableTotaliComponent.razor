@using Data.Models
<MudSimpleTable  Style="overflow-x: auto; " >

    <tbody>

        <tr>
            <td>Numri porosive:</td>
            <td style="font-weight:bolder; text-align:right;">@Orders.Count().ToString()</td>
        </tr>
        <tr>
            <td>Totali ditor:</td>
            <td style="font-weight:bolder; font-size:17.5px;text-align:right;">@Orders.Sum(d=> decimal.Parse(d.vlera)).ToString(".00")€</td>
        </tr>
        <tr>
            <td>Rush hour:</td>
            <td style="font-weight:bolder; text-align:right;">@ReturnRushHour()</td>
        </tr>
        <tr>
            <td>Paradite (deri 15:00):☀️</td>
            <td style="font-weight:bolder; text-align:right;">@ReturnParadite("para")€</td>
        </tr>
        <tr>
            <td>Pasdite (pas 15:00):🌙</td>
            <td style="font-weight:bolder; text-align:right;">@ReturnParadite("pas")€</td>
        </tr>
    </tbody>
</MudSimpleTable>

@code {

    private IEnumerable<DetaletEFaturimit>? Orders;

    protected override async Task OnInitializedAsync()
    {
        Orders = await new Data.GetData().GetDetaletAsync();
    }

    protected string ReturnSasiaPerProdukt(string artikulli)
    {
        return Orders.Where(d => d.artikulli.Equals(artikulli)).Sum(d => decimal.Parse(d.sasia)).ToString();;
    }

    protected string ReturnParadite(string paraPas)
    {
        if(paraPas.Equals("para")) return Orders.Where(d => DateTime.Parse(d.ora).Hour < 15).Sum(d => decimal.Parse(d.vlera)).ToString(".00");
        else return Orders.Where(d => DateTime.Parse(d.ora).Hour > 15).Sum(d => decimal.Parse(d.vlera)).ToString(".00");

    }


    protected string ReturnRushHour()
    {
        //return "13:00";
        List<OraModel> query = (from d in Orders
                                group d by DateTime.Parse(d.ora).Hour
                        into grp
                                select new OraModel()
                        {
                            Ora = grp.Key,
                            Vlera = grp.Sum(d => decimal.Parse(d.vlera)),
                        }).OrderBy(d => d.Ora).ToList();
        return query.Max(d => d.Ora).ToString() + ":00" ;
    }

    
    partial class OraModel{
    public int Ora { get; set; }
    public decimal Vlera { get; set; }
    }
}

